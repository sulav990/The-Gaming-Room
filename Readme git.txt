For my CS 230 portfolio, I submitted a software design document for my client, "The Gaming Room," who needed to expand their Android game "Draw It or Lose It" into a scalable, multi-platform web application. I believe I was particularly effective in translating complex technical concepts into accessible, client-friendly language, especially when explaining the "Domain Model" and object-oriented principles . The most helpful part of this design process for the coding phase was creating that "Domain Model" UML diagram, which served as an invaluable "blueprint" by defining the classes (Game, Team, Player) and their relationships before any code was written. If I could revise one part, I would fully build out the "Requirements" section, which was skipped, to create a more detailed list of functional and non-functional requirements. I interpreted the user's needs, like "beating the lag" and handling thousands of players , by recommending specific technologies like WebSockets for real-time communication and a scalable Linux server â€”a critical process, as success is measured by solving the user's problems. My overall top-down approach of identifying constraints, creating the domain model, and then recommending a full technology stack proved effective, and it's a strategy I would use again.
